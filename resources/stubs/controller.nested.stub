<?php

namespace DummyNamespace;

use DummyFullModelClass;
use DummyRootNamespaceHttp\Controllers\Controller;
use Illuminate\Http\Request;
use ParentDummyFullModelClass;

class DummyClass extends Controller
{
    protected $baseViewPath = 'ParentDummyModelVariable.DummyModelVariable';

    public function __construct()
    {
        $this->authorizeResource(DummyModelClass::class, 'DummyModelVariable');
    }

    /**
     * Display a listing of the resource.
     *
     * @param  \ParentDummyFullModelClass  $ParentDummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function index(ParentDummyModelClass $ParentDummyModelVariable)
    {
        $this->authorize('view', $ParentDummyModelVariable);

        if ($request->wantsJson()) {
            return $ParentDummyModelVariable->DummyModelVariables()
                ->get();
        }
    }

    /**
     * Show the form for creating a new resource.
     *
     * @param  \ParentDummyFullModelClass  $ParentDummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function create(ParentDummyModelClass $ParentDummyModelVariable)
    {
        $this->authorize('create', $ParentDummyModelVariable);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \ParentDummyFullModelClass  $ParentDummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request, ParentDummyModelClass $ParentDummyModelVariable)
    {
        $this->authorize('create', $ParentDummyModelVariable);

        if ($request->wantsJson()) {
            return $ParentDummyModelVariable->DummyModelVariables()->create([

            ]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \ParentDummyFullModelClass  $ParentDummyModelVariable
     * @param  \DummyFullModelClass  $DummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request, ParentDummyModelClass $ParentDummyModelVariable, DummyModelClass $DummyModelVariable)
    {
        if ($request->wantsJson()) {
            return $DummyModelVariable;
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \ParentDummyFullModelClass  $ParentDummyModelVariable
     * @param  \DummyFullModelClass  $DummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function edit(ParentDummyModelClass $ParentDummyModelVariable, DummyModelClass $DummyModelVariable)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \ParentDummyFullModelClass  $ParentDummyModelVariable
     * @param  \DummyFullModelClass  $DummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, ParentDummyModelClass $ParentDummyModelVariable, DummyModelClass $DummyModelVariable)
    {
        $attributes = $request->validate([

        ]);

        $DummyModelVariable->update($attributes);

        if ($request->wantsJson()) {
            return $DummyModelVariable;
        }

        return back()
            ->with('status', [
                'type' => 'success',
                'text' => 'Gespeichert.',
            ]);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \ParentDummyFullModelClass  $ParentDummyModelVariable
     * @param  \DummyFullModelClass  $DummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request, ParentDummyModelClass $ParentDummyModelVariable, DummyModelClass $DummyModelVariable)
    {
        if ($isDeletable = $DummyModelVariable->isDeletable()) {
            $DummyModelVariable->delete();
        }

        if ($request->wantsJson())
        {
            return [
                'deleted' => $isDeletable,
            ];
        }

        if ($isDeletable) {
            $status = [
                'type' => 'success',
                'text' => 'Datensatz gelÃ¶scht.',
            ];
        }
        else {
            $status = [
                'type' => 'danger',
                'text' => 'Datensatz kann nicht gelÃ¶scht werden.',
            ];
        }

        return redirect(route($this->baseViewPath . '.index', ['review' => $review->id]))
            ->with('status', $status);
    }
}
